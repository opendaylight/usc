<?xml version="1.0" encoding="UTF-8"?>
<refentry xmlns="http://docbook.org/ns/docbook" version="5.0"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xml:id="man.1.pyang">

  <info>
    <author>
      <personname>Martin Bjorklund</personname>
      <affiliation><orgname>Tail-f Systems</orgname></affiliation>
      <email>mbj@tail-f.com</email>
      <contrib/>
    </author>
    <author>
      <personname>Ladislav Lhotka</personname>
      <affiliation><orgname>CZ.NIC</orgname></affiliation>
      <email>lhotka@nic.cz</email>
      <contrib/>
    </author>
    <author>
      <personname>Stefan Wallin</personname>
      <affiliation><orgname>Tail-f Systems</orgname></affiliation>
      <email>stefan@tail-f.com</email>
      <contrib/>
    </author>

    <date>%DATE%</date>
  </info>

  <refmeta>
    <refentrytitle>pyang</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="manual">pyang manual</refmiscinfo>
    <refmiscinfo class="source">pyang-%PYANG_VERSION%</refmiscinfo>
  </refmeta>

  <refnamediv xml:id="man.1.pyang.name">
    <refname>pyang</refname>
    <refpurpose>
      validate and convert YANG modules to various formats
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv xml:id="man.1.pyang.synopsis">
    <cmdsynopsis>
      <command>pyang</command>
      <arg choice="opt">--canonical</arg>
      <arg choice="opt">--strict</arg>
      <arg choice="opt">--ietf</arg>
      <arg choice="opt">--lax-xpath-checks</arg>
      <arg choice="opt">--hello</arg>
      <arg choice="opt">-o <replaceable>outfile</replaceable></arg>
      <arg choice="opt">-f <replaceable>format</replaceable></arg>
      <arg choice="opt">-p <replaceable>path</replaceable></arg>
      <arg choice="opt">-W <replaceable>warning</replaceable></arg>
      <arg choice="opt">-E <replaceable>error</replaceable></arg>
      <arg choice="plain" rep="repeat">
        <replaceable>file</replaceable>
      </arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>pyang</command>
      <group choice="plain">
        <arg choice="plain">-h</arg>
        <arg choice="plain">--help</arg>
      </group>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>pyang</command>
      <group choice="plain">
        <arg choice="plain">-v</arg>
        <arg choice="plain">--version</arg>
      </group>
    </cmdsynopsis>

    <para>
      One or more <replaceable>file</replaceable> parameters may be
      given on the command line. They denote either YANG modules to be
      processed (in YANG or YIN syntax) or, using the
      <option>--hello</option> switch, a server &lt;hello&gt; message
      conforming to <link
      xlink:href="http://tools.ietf.org/html/rfc6241">RFC 6241</link>
      and <link xlink:href="http://tools.ietf.org/html/rfc6020">RFC
      6020</link>, which completely defines the data model - supported
      YANG modules as well as features and capabilities. In the latter
      case, only one <replaceable>file</replaceable> parameter may be
      present.
    </para>

    <para>
      If no files are given, <command>pyang</command> reads input
      from stdin, which must be one module or a server &lt;hello&gt; message.
    </para>
    <para>
      Only the most common options are listed here.  See below for a
      complete list of options.
    </para>
  </refsynopsisdiv>

  <refsect1 xml:id="man.1.pyang.description">
    <title>Description</title>
    <para>
      The <command>pyang</command> program is used to validate YANG
      modules (<link
      xlink:href="http://tools.ietf.org/html/rfc6020">RFC
      6020</link>).  It is also used to convert YANG modules into
      equivalent YIN modules.  From a valid module a hybrid DSDL schema (<link
      xlink:href="http://tools.ietf.org/html/rfc6110">RFC 6110</link>)
      can be generated.
    </para>

    <para>
      If no <replaceable>format</replaceable> is given, the specified
      modules are validated, and the program exits with exit code 0 if
      all modules are valid.
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.options">
    <title>Options</title>
    <variablelist remap="TP">

      <varlistentry>
        <term>
          <option>-h</option>
          <option>--help</option>
        </term>
        <listitem>
          <para>
            Print a short help text and exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-v</option>
          <option>--version</option>
        </term>
        <listitem>
          <para>
            Print the version number and exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-e</option>
          <option>--list-errors</option>
        </term>
        <listitem>
          <para>
            Print a listing of all error codes and messages pyang
            might generate, and then exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--print-error-code</option>
        </term>
        <listitem>
          <para>
            On errors, print the symbolic error code instead of the
            error message.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-Werror</option>
        </term>
        <listitem>
          <para>
            Treat warnings as errors.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-Wnone</option>
        </term>
        <listitem>
          <para>
            Do not print any warnings.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-W</option>
          <replaceable>errorcode</replaceable>
        </term>
        <listitem>
          <para>
            Treat <replaceable>errorcode</replaceable> as a warning,
            even if <option>-Werror</option> is given.
            <replaceable>errorcode</replaceable> must be a warning or
            a minor error.
          </para>
          <para>
            Use <option>--list-errors</option> to get a listing of all
            errors and warnings.
          </para>
          <para>
            The following example treats all warnings except the
            warning for unused imports as errors:
          </para>
          <informalexample>
            <screen>$ pyang --Werror -W UNUSED_IMPORT</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-E</option>
          <replaceable>errorcode</replaceable>
        </term>
        <listitem>
          <para>
            Treat the warning <replaceable>errorcode</replaceable> as
            an error.
          </para>
          <para>
            Use <option>--list-errors</option> to get a listing of all
            errors and warnings.
          </para>
          <para>
            The following example treats only the warning for unused
            import as an error:
          </para>
          <informalexample>
            <screen>$ pyang --Werror -W UNUSED_IMPORT</screen>
          </informalexample>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--canonical</option>
        </term>
        <listitem>
          <para>
            Validate the module(s) according to the canonical YANG order.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--strict</option>
        </term>
        <listitem>
          <para>
            Force strict YANG compliance.  Currently this checks
            that the deref() function is not used in XPath expressions
            and leafrefs.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--ietf</option>
        </term>
        <listitem>
          <para>
            Validate the module(s) according to IETF rules as
            specified in <link
            xlink:href="http://tools.ietf.org/html/rfc6087">RFC
            6087</link>.  In addition, it checks that the module is in
            canonical order, and that
            <option>--max-line-length</option> is 72 so that the
            module fits into an RFC.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--lax-xpath-checks</option>
        </term>
        <listitem>
          <para>
            Lax checks of XPath expressions.  Specifically, do not
            generate an error if an XPath expression uses a variable
            or an unknown function.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-L</option>
          <option>--hello</option>
        </term>
        <listitem>
          <para>
            Interpret the input file or standard input as a server
            &lt;hello&gt; message. In this case, no more than one
            <replaceable>file</replaceable> parameter may be given.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--trim-yin</option>
        </term>
        <listitem>
          <para>
            In YIN input modules, remove leading and trailing
            whitespace from every line in the arguments of the
            following statements: 'contact', 'description',
            'error-message', 'organization' and 'reference'. This way,
            the XML-indented argument texts look tidy after
            translating the module to the compact YANG syntax.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--max-line-length</option>
          <replaceable>maxlen</replaceable>
        </term>
        <listitem>
          <para>
            Give a warning if any line is longer than
            <replaceable>maxlen</replaceable>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--max-identifier-length</option>
          <replaceable>maxlen</replaceable>
        </term>
        <listitem>
          <para>
            Give a error if any identifier is longer than
            <replaceable>maxlen</replaceable>.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-f</option>
          <option>--format</option>
          <replaceable>format</replaceable>
        </term>
        <listitem>
          <para>
            Convert the module(s) into
            <replaceable>format</replaceable>.  Some translators
            require a single module, and some can translate multiple
            modules at one time.  If no
            <replaceable>outfile</replaceable> file is specified, the
            result is printed on stdout.  The supported formats are
            listed in <xref linkend="man.1.pyang.output_formats"
            endterm="man.1.pyang.output_formats_title"/> below.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-o</option>
          <option>--output</option>
          <replaceable>outfile</replaceable>
        </term>
        <listitem>
          <para>
            Write the output to the file
            <replaceable>outfile</replaceable> instead of stdout.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>-p</option>
          <option>--path</option>
          <replaceable>path</replaceable>
        </term>
        <listitem>
          <para>
            <replaceable>path</replaceable> is a colon (:) separated
            list of directories to search for imported modules.  This
            option may be given multiple times.
          </para>
          <para>
            The following directories are always added to the search path:
          </para>
          <orderedlist numeration="arabic" spacing="compact">
            <listitem>
              <para>
                current directory
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$YANG_MODPATH</envar>
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$HOME</envar><filename>/yang/modules</filename>
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$YANG_INSTALL</envar><filename>/yang/modules</filename>
                OR if <envar>$YANG_INSTALL</envar> is unset
                <filename>&lt;the default installation
                directory&gt;/yang/modules</filename> (on Unix
                systems: <filename>/usr/share/yang/modules</filename>)
              </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <option>--plugindir</option>
          <replaceable>plugindir</replaceable>
        </term>
        <listitem>
          <para>
            Load all YANG plugins found in the directory
            <emphasis>plugindir</emphasis>.  This option may be given
            multiple times.
          </para>
          <para>
            list of directories to search for pyang plugins.  The
            following directories are always added to the search
            path:
          </para>
          <orderedlist numeration="arabic">
            <listitem>
              <para>
                <filename>pyang/plugins</filename> from
                where pyang is installed
              </para>
            </listitem>
            <listitem>
              <para>
                <envar>$PYANG_PLUGINPATH</envar>
              </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>
          <replaceable>file...</replaceable>
        </term>
        <listitem>
          <para>
            These are the names of the files containing the modules to
            be validated, or the module to be converted.
          </para>
        </listitem>
      </varlistentry>

    </variablelist>
  </refsect1>


  <refsect1 xml:id="man.1.pyang.output_formats">
    <title xml:id="man.1.pyang.output_formats_title">
      Output Formats
    </title>

    <para>
      If pyang plugins are installed, these plugins may define
      their own options, or add new formats to the <option>-f</option>
      option.  These options and formats are listed in <userinput>pyang
      -h</userinput>.
    </para>

    <variablelist>
      <varlistentry>
        <term><emphasis>yin</emphasis></term>
        <listitem>
          <para>the XML syntax of YANG</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>yang</emphasis></term>
        <listitem>
          <para>normal YANG syntax</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>dsdl</emphasis></term>
        <listitem>
          <para>Hybrid DSDL schema (RELAX NG with annotations) which
          is primarily intended as an interim product used by
          <command>yang2dsdl</command>(1). See <link
          xlink:href="http://tools.ietf.org/html/rfc6110">RFC
          6110</link> for details.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>xsd</emphasis></term>
        <listitem>
          <para>DEPRECATED: W3C XML Schema</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>depend</emphasis></term>
        <listitem>
          <para>Prints a Makefile dependency rule for the module</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>tree</emphasis></term>
        <listitem>
          <para>tree structure of the module</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>uml</emphasis></term>
        <listitem>
          <para>Prints a file that can be read by plantuml to
          generate UML diagrams</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>xmi</emphasis></term>
        <listitem>
          <para>Prints a file that can be imported to ArgoUML</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>jstree</emphasis></term>
        <listitem>
          <para>HTML/JavaScript tree navigator</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>hypertree</emphasis></term>
        <listitem>
          <para>A hyperbolic tree navigator that can be displayed
          by treebolic</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>jsonxsl</emphasis></term>
        <listitem>
          <para>Generates XSLT stylesheet for transforming XML
          instance documents into JSON.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>jtox</emphasis></term>
        <listitem>
          <para>Generates a driver file for transforming JSON
          instance documents into XML.</para>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1 xml:id="man.1.pyang.yang_output">
    <title>YANG Output</title>
    <para>
      Options for the <emphasis>yang</emphasis> output format:
    </para>

    <variablelist>
      <varlistentry>
        <term><option>--yang-canonical</option></term>
        <listitem>
          <para>
            Generate all statements in the canonical order.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--yang-remove-unused-imports</option></term>
        <listitem>
          <para>
            Remove unused import statements from the output.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.yin_output">
    <title>YIN Output</title>
    <para>
      Options for the <emphasis>yin</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--yin-canonical</option></term>
        <listitem>
          <para>
            Generate all statements in the canonical order.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--yin-pretty-strings</option></term>
        <listitem>
          <para>
            Pretty print strings, i.e. print with extra whitespace in
            the string.  This is not strictly correct, since the
            whitespace is significant within the strings in XML, but
            the output is more readable.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.dsdl_output">
    <title>DSDL Output</title>
    <para>
      Options for the <emphasis>dsdl</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--dsdl-no-documentation</option></term>
        <listitem>
          <para>
            Do not print documentation annotations
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--dsdl-no-dublin-core</option></term>
        <listitem>
          <para>
            Do not print Dublin Core metadata terms
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--dsdl-record-defs</option></term>
        <listitem>
          <para>
            Record translations of all top-level typedefs and
            groupings in the output schema, even if they are not
            used. This is useful for translating library modules.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.xsd_output">
    <title>XSD Output</title>
    <para>
      NOTE: The XSD ouput plugin is deprecated.  Use the dsdl plugin
      instead.
    </para>
    <para>
      Options for the <emphasis>xsd</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--xsd-no-appinfo</option></term>
        <listitem>
          <para>
            Do not print YANG specific appinfo.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--xsd-no-lecture</option></term>
        <listitem>
          <para>
            Do not print the lecture about how the XSD can be used.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--xsd-no-imports</option></term>
        <listitem>
          <para>
            Do not generate any xs:imports.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--xsd-break-pattern</option></term>
        <listitem>
          <para>
            Break long patterns so that they fit into RFCs. The
            resulting patterns might not always be valid XSD, so use
            with care.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.depend_output">
    <title>Depend Output</title>
    <para>
      The <emphasis>depend</emphasis> output generates a Makefile
      dependency rule for files based on a YANG module.  This is
      useful if files are generated from the module.  For example,
      suppose a .c file is generated from each YANG module.  If the
      YANG module imports other modules, or includes submodules, the
      .c file needs to be regenerated if any of the imported or
      included modules change.  Such a dependency rule can be
      generated like this:
    </para>

    <informalexample>
      <screen>$ pyang -f depend --depend-target mymod.c \
    --depend-extension .yang mymod.yang
mymod.c : ietf-yang-types.yang my-types.yang</screen>
    </informalexample>

    <para>
      Options for the <emphasis>depend</emphasis> output format:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--depend-target</option></term>
        <listitem>
          <para>
            Makefile rule target.  Default is the modulename.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-extension</option></term>
        <listitem>
          <para>
            YANG module file name extension.  Default is no extension.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-no-submodules</option></term>
        <listitem>
          <para>
            Do not generate dependencies for included submodules.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-include-path</option></term>
        <listitem>
          <para>
            Include file path in the prerequisites.  Note that if no
            <option>--depend-extension</option> has been given, the
            prerequisite is the filename as found, i.e., ending in
            ".yang" or ".yin".
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--depend-ignore-module</option></term>
        <listitem>
          <para>
            Name of YANG module or submodule to ignore in the
            prerequisites.  This option can be given multiple times.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.tree_output">
    <title>Tree Output</title>
    <para>
      The <emphasis>tree</emphasis> output prints the resulting schema
      tree from one or more modules.  Use <userinput>pyang
      --tree-help</userinput> to print a description on the symbols
      used by this format.
    </para>
    <para>
      Tree output specific options:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--tree-help</option></term>
        <listitem>
          <para>
            Print help on symbols used in the tree output and exit.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-depth</option>
          <replaceable>depth</replaceable>
        </term>
        <listitem>
          <para>
            Levels of the tree to print.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>--tree-path</option>
          <replaceable>path</replaceable>
        </term>
        <listitem>
          <para>
            Subtree to print.  The <replaceable>path</replaceable> is
            a slash ("/") separated path to a subtree to print.  For
            example "/nacm/groups".
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>


  <refsect1 xml:id="man.1.pyang.xmioutput">
    <title>XMI Output</title>
    <para>
      The <emphasis>xmi</emphasis> output prints an XMI file
      that can be imported by ArgUML http://argouml.tigris.org/.
    </para>
    <para>
      Drag all classes to the diagram area in ArgoUML and use
      the Arrange-Layout menu.
    </para>
    <para>
      XMI output specific option:
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.jstree">
    <title>jstree Output</title>
    <para>
      The <emphasis>jstree</emphasis> output prints an HTML/JavaScript
      based YANG browser. It references an images folder that needs to
      exist in the same folder as the generated file. This is installed
      as share/yang/images in the pyang installation directory.
      The easiest way is to symlink to this directory.
    </para>
    <para>
      jstree output specific option:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--jstree-help</option></term>
        <listitem>
          <para>
            Print help on jstree usage and exit.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>

  </refsect1>

  <refsect1 xml:id="man.1.pyang.hypertree">
    <title>hypertree output</title>
    <para>
      The <emphasis>hypertree</emphasis> output generates a hyperbolic YANG
      browser. The generated xml file can be imported to treebolic.
      Download treebolic from http://treebolic.sourceforge.net/en/index.html.
    </para>
    <para>
      Color coding in the tree:
    <itemizedlist>
      <listitem>
        <para>Light green node background : config = True</para>
      </listitem>
      <listitem>
        <para>Light yellow node background : config = False</para>
      </listitem>
      <listitem>
        <para>Red node foreground : mandatory = True</para>
      </listitem>
      <listitem>
        <para>White leaf node background : index</para>
      </listitem>
      <listitem>
        <para>Orange foreground : presence container</para>
      </listitem>
    </itemizedlist>
    </para>

    <para>
      The xml file references an images folder that needs to
      exist in the same folder as the generated file. This is installed
      as share/yang/images in the pyang installation directory.
      The easiest way is to symlink to this directory.
    </para>
    <para>
      <userinput>pyang -f hypertree model.yang -o model.xml</userinput>
    </para>
    <para>
      Prepare a HTML file that links to the generated XMI file:
    </para>
    <informalexample>
      <programlisting>
&lt;applet code="treebolic.applet.Treebolic.class"
        archive="TreebolicAppletDom.jar"
        id="Treebolic" width="100%" height="100%"&gt;
  &lt;param name="doc" value="model.xml"&gt;
&lt;/applet&gt;
      </programlisting>
    </informalexample>
    <para>
      hypertree output specific option:
    </para>
    <variablelist>
      <varlistentry>
        <term><option>--hypertree-help</option></term>
        <listitem>
          <para>
            Print help on hypertree usage and exit.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--xmi-no-assoc-names</option></term>
        <listitem>
          <para>
            Do not print association names. ArgoUML has no way of hiding the
            association name and the diagram gets cluttered.
          </para>
        </listitem>
      </varlistentry>


    </variablelist>

  </refsect1>


  <refsect1 xml:id="man.1.pyang.uml_output">
    <title>UML Output</title>
    <para>
      The <emphasis>uml</emphasis> output prints an output that can 
      be used as input-file to plantuml in order to generate a UML diagram.
      Download the plantuml jar-file from http://plantuml.sourceforge.net. Note
      that it requires graphviz, http://www.graphviz.org/.
    </para>
    <para>
      For large diagrams you may need to increase the Java heap-size
      by the -XmxSIZEm option, to java.  For example: <userinput>java
      -Xmx1024m -jar plantuml.jar ....</userinput>
    </para>
    <para>
      Options for the <emphasis>UML</emphasis> output format:
    </para>

    <variablelist>

      <varlistentry>
        <term><option>--uml-classes-only</option></term>
        <listitem>
          <para>
            Generate UML with classes only, no attributes
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-split-pages=PAGES_LAYOUT</option></term>
        <listitem>
          <para>
            Generate UML output split into pages, NxN, example 2x2.
            One .png file per page will be rendered.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-output-director=OUTPUT_DIRECTORY</option></term>
        <listitem>
          <para>
            Put the generated .png files(s) in the specified output directory.
            Default is "img/"
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-title=TITLE</option></term>
        <listitem>
          <para>
            Set the title of the generated UML diagram, (default is
            YANG module name).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--uml-header=HEADER</option></term>
        <listitem>
          <para>
            Set the header of the generated UML diagram.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-footer=FOOTER</option></term>
        <listitem>
          <para>
            Set the footer of the generated UML diagram.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-long-identifers</option></term>
        <listitem>
          <para>
            Use complete YANG schema identifiers for UML class names.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-no</option></term>
        <listitem>
          <para>
            This option suppresses specified arguments in the
            generated UML diagram.  Valid arguments are: uses,
            leafref, identity, identityref, typedef, annotation,
            import, circles, stereotypes. Annotation suppresses YANG
            constructs rendered as annotations, examples module info,
            config statements for containers.  Example
            --uml-no=circles,stereotypes,typedef,import
          </para>
        </listitem>
      </varlistentry>


      <varlistentry>
        <term><option>--uml-truncate</option></term>
        <listitem>
          <para>
            Leafref attributes and augment elements can have long
            paths making the classes too wide. This option will only
            show the tail of the path.  Example
            --uml-truncate=augment,leafref.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-inline-groupings</option></term>
        <listitem>
          <para>
            Render the diagram with groupings inlined.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-inline-augments</option></term>
        <listitem>
          <para>
            Render the diagram with augments inlined.
          </para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>--uml-filter-file=FILTER_FILE</option></term>
        <listitem>
          <para>
            NOT IMPLEMENTED: Only paths in the filter file will be
            included in the diagram. A default filter file is generated by
            option --filter.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.jsonxsl_output">
    <title>JSONXSL Output</title>
    <para>
      The <emphasis>jsonxsl</emphasis> output generates an XSLT 1.0
      stylesheet that can be used for transforming an XML instance
      document into JSON text as specified in <link
      xlink:href="http://tools.ietf.org/html/draft-lhotka-netmod-yang-json">draft-lhotka-netmod-yang-json</link>. The
      XML document must be a valid instance of the data model which is
      specified as one or more input YANG modules on the command line
      (or via a &lt;hello&gt; message, see the
      <option>--hello</option> option).
    </para>
    <para>
      The data tree(s) must be wrapped at least in either
      &lt;nc:data&gt; or &lt;nc:config&gt; element, where "nc" is the
      namespace prefix for the standard NETCONF URI
      "urn:ietf:params:xml:ns:netconf:base:1.0", or the XML instance
      document has to be a complete NETCONF RPC request/reply or
      notification. Translation of RPCs and notifications defined by
      the data model is also supported.
    </para>
    <para>
      The generated stylesheet accepts the following parameters that
      modify its behaviour:
    </para>
    <itemizedlist>
      <listitem>
        <para><emphasis>compact</emphasis>: setting this parameter to
        1 results in a compact representation of the JSON text,
        i.e. without any whitespace. The default is 0 which means that
        the JSON output is pretty-printed.</para>
      </listitem>
      <listitem>
        <para><emphasis>ind-step</emphasis>: indentation step,
        i.e. the number of spaces to use for each level. The default
        value is 2 spaces. Note that this setting is only useful for
        pretty-printed output (compact=0).</para>
      </listitem>
    </itemizedlist>
    <para>
      The stylesheet also includes the file
      <filename>jsonxsl-templates.xsl</filename> which is a part of
      <command>pyang</command> distribution.
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.jtox_output">
    <title>JTOX Output</title>
    <para>
      The <emphasis>jtox</emphasis> output generates a driver file
      which can be used as one of the inputs to
      <command>json2xml</command> for transforming a JSON document
      to XML as specified in <link
      xlink:href="http://tools.ietf.org/html/draft-lhotka-netmod-yang-json">draft-lhotka-netmod-yang-json</link>.
    </para>
    <para>
      The <emphasis>jtox</emphasis> output itself is a JSON document
      containing a concise representation of the data model which is
      specified as one or more input YANG modules on the command line
      (or via a &lt;hello&gt; message, see the
      <option>--hello</option> option).
    </para>
    <para>
      See <command>json2xml</command> manual page for more information.
    </para>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.yang_extensions.xpath_functions">
    <title>YANG Extensions</title>
    <para>
      This section describes XPath functions that can be used in
      "must", "when", or "path" expressions in YANG modules, in
      addition to the core XPath 1.0 functions.
    </para>
    <para>
      <command>pyang</command> can be instructed to reject the usage
      of these functions with the parameter
      <parameter>--strict</parameter>.
    </para>

    <para>
      <command>Function:</command> <emphasis>node-set</emphasis>
      <command>deref</command>(<emphasis>node-set</emphasis>)
    </para>
    <para>
      The <function>deref</function> function follows the reference
      defined by the first node in document order in the argument
      node-set, and returns the nodes it refers to.
    </para>
    <para>
      If the first argument node is an
      <type>instance-identifier</type>, the function returns a
      node-set that contains the single node that the instance
      identifier refers to, if it exists.  If no such node exists,
      an empty node-set is returned.
    </para>
    <para>
      If the first argument node is a <type>leafref</type>, the
      function returns a node-set that contains the nodes that the
      leafref refers to.
    </para>
    <para>
      If the first argument node is of any other type, an empty
      node-set is returned.
    </para>
    <para>
      The following example shows how a leafref can be written with
      and without the <function>deref</function> function:
    </para>
    <informalexample>
      <programlisting>
/* without deref */

leaf my-ip {
  type leafref {
    path "/server/ip";
  }
}
leaf my-port {
  type leafref {
    path "/server[ip = current()/../my-ip]/port";
  }
}

/* with deref */

leaf my-ip {
  type leafref {
    path "/server/ip";
  }
}
leaf my-port {
  type leafref {
    path "deref(../my-ip)/../port";
  }
}
      </programlisting>
    </informalexample>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.example">
    <title>Example</title>

    <para>
      The following example validates the standard YANG modules with
      derived types:
    </para>

    <informalexample>
      <screen>$ pyang ietf-yang-types.yang ietf-inet-types.yang</screen>
    </informalexample>

    <para>
      The following example converts the ietf-yang-types module into
      YIN:
    </para>

    <informalexample>
      <screen>$ pyang -f yin -o ietf-yang-types.yin ietf-yang-types.yang</screen>
    </informalexample>

    <para>
      The following example converts the ietf-netconf-monitoring module into
      a UML diagram:
    </para>

    <informalexample>
      <screen>
$ pyang -f uml ietf-netconf-monitoring.yang > \
    ietf-netconf-monitoring.uml
$ java -jar plantuml.jar ietf-netconf-monitoring.uml
$ open img/ietf-netconf-monitoring.png
      </screen>
    </informalexample>
  </refsect1>

  <refsect1 xml:id="man.1.pyang.environment_variables">
    <title>Environment Variables</title>

    <para>
      pyang searches for referred modules in the colon (:) separated
      path defined by the environment variable
      <envar>$YANG_MODPATH</envar> and in the directory
      <envar>$YANG_INSTALL</envar><filename>/yang/modules</filename>.
    </para>

    <para>
      pyang searches for plugins in the colon (:) separated path
      defined by the environment variable
      <envar>$PYANG_PLUGINDIR</envar>.
    </para>

  </refsect1>


  <refsect1 xml:id="man.1.pyang.bugs">
    <title>Bugs</title>

    <orderedlist>
      <listitem>
        <para>
          The XPath arguments for the <emphasis>must</emphasis> and
          <emphasis>when</emphasis> statements are checked only for
          basic syntax errors.
        </para>
      </listitem>
    </orderedlist>

  </refsect1>

</refentry>
